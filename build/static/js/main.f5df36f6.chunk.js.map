{"version":3,"sources":["components/login.component.js","components/signup.component.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","state","users","Email","Password","axios","get","then","res","setState","data","id","name","email","password","evenet","console","log","preventDefault","post","this","componentDidMount","put","className","onSubmit","e","submit","value","onChange","target","type","htmlFor","map","user","key","Component","App","Name","React","to","exact","path","component","SignUp","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f5df36f6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nexport default class Login extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n          users:[],\n          Email:'',\n          Password:''\n        }\n      }\n      componentDidMount(){\n        axios.get(\"http://localhost:8080/auth/login\")\n        .then((res)=>{\n          this.setState({\n            users:res.data,\n            id:0,\n            name:'',\n            email:'',\n            password:''\n          })\n        })\n      }\n      submit(evenet,id){\n        console.log(id)\n        evenet.preventDefault();\n        if(id===0){\n          axios.post(\"http://localhost:8080/auth/login\",{\n            name:this.state.name,\n            email:this.state.email,\n            password:this.state.password\n          }).then(()=>{\n            this.componentDidMount();\n          })\n        }else{\n          axios.put(\"http://localhost:8080/auth/login\",{\n            id:id,\n            name:this.state.name,\n            email:this.state.email,\n            password:this.state.password\n          }).then(()=>{\n            this.componentDidMount();\n          })\n        }\n      }\n    render() {\n        return (\n          <div className=\"container\">\n          <div className=\"row\">\n          <div className=\"col s6\">\n                  <form onSubmit={(e)=>this.submit(e,this.state.id)}>\n                \n                   <div className=\"input-field col s12\">\n                     <i className=\"material-icons prefix\">mail</i>\n                     <input value={this.state.email} onChange={(e)=>this.setState({email:e.target.value})} type=\"email\" id=\"autocomplete-input\" className=\"autocomplete\"  />\n                     <label htmlFor=\"autocomplete-input\">Enter Email</label>\n                   </div>\n                   <div className=\"input-field col s12\">\n                     <i className=\"material-icons prefix\"></i>\n                     <input value={this.state.password} onChange={(e)=>this.setState({password:e.target.value})} type=\"password\" id=\"autocomplete-input\" className=\"autocomplete\"  />\n                     <label htmlFor=\"autocomplete-input\">Enter Password</label>\n                   </div>\n                   <button className=\"btn waves-effect waves-light right\" type=\"submit\" name=\"action\" >Submit\n                     <i className=\"material-icons right\"></i>\n                   </button>\n                  </form>\n           </div>          \n           <div className=\"col s6\">\n           <table>\n         \n \n         <tbody>\n             {\n               this.state.users.map(user =>\n                   <tr key={user.id}>\n                       <td>{user.name}</td>\n                       <td>{user.email}</td>\n                       <td>{user.password}</td>\n                      \n                   </tr>\n                 )\n             }\n          \n \n         </tbody>\n       </table>\n           </div>                \n           </div>              \n       </div>\n     );\n   }\n }","import React from 'react';\nimport axios from 'axios';\nclass  App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      users:[],\n      id:0,\n      Name:'',\n      Email:'',\n      Password:''\n    }\n  }\n  componentDidMount(){\n    axios.get(\"http://localhost:8080/auth/register\")\n    .then((res)=>{\n      this.setState({\n        users:res.data,\n        id:0,\n        name:'',\n        email:'',\n        password:''\n      })\n    })\n  }\n  submit(evenet,id){\n    console.log(id)\n    evenet.preventDefault();\n    if(id===0){\n      axios.post(\"http://localhost:8080/auth/register\",{\n        name:this.state.name,\n        email:this.state.email,\n        password:this.state.password\n      }).then(()=>{\n        this.componentDidMount();\n      })\n    }else{\n      axios.put(\"http://localhost:8080/auth/register\",{\n        id:id,\n        name:this.state.name,\n        email:this.state.email,\n        password:this.state.password\n      }).then(()=>{\n        this.componentDidMount();\n      })\n    }\n  }\n  \n  render(){\n    return (\n      <div className=\"container\">\n         <div className=\"row\">\n         <div className=\"col s6\">\n                 <form onSubmit={(e)=>this.submit(e,this.state.id)}>\n                 <div className=\"input-field col s12\">\n                    <i className=\"material-icons prefix\"></i>\n                    <input value={this.state.name} onChange={(e)=>this.setState({name:e.target.value})} type=\"text\" id=\"autocomplete-input\" className=\"autocomplete\"  />\n                    <label htmlFor=\"autocomplete-input\">Enter Name</label>\n                  </div>\n                  <div className=\"input-field col s12\">\n                    <i className=\"material-icons prefix\">mail</i>\n                    <input value={this.state.email} onChange={(e)=>this.setState({email:e.target.value})} type=\"email\" id=\"autocomplete-input\" className=\"autocomplete\"  />\n                    <label htmlFor=\"autocomplete-input\">Enter Email</label>\n                  </div>\n                  <div className=\"input-field col s12\">\n                    <i className=\"material-icons prefix\"></i>\n                    <input value={this.state.password} onChange={(e)=>this.setState({password:e.target.value})} type=\"password\" id=\"autocomplete-input\" className=\"autocomplete\"  />\n                    <label htmlFor=\"autocomplete-input\">Enter Password</label>\n                  </div>\n                  <button className=\"btn waves-effect waves-light right\" type=\"submit\" name=\"action\" >Submit\n                    <i className=\"material-icons right\"></i>\n                  </button>\n                 </form>\n          </div>          \n          <div className=\"col s6\">\n          <table>\n        \n\n        <tbody>\n            {\n              this.state.users.map(user =>\n                  <tr key={user.id}>\n                      <td>{user.name}</td>\n                      <td>{user.email}</td>\n                      <td>{user.password}</td>\n                     \n                  </tr>\n                )\n            }\n         \n\n        </tbody>\n      </table>\n          </div>                \n          </div>              \n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport Login from \"./components/login.component\";\nimport SignUp from \"./components/signup.component\";\n\nfunction App() {\n  return (<Router>\n    <div className=\"App\">\n      <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\">\n        <div className=\"container\">\n          <Link className=\"navbar-brand\" to={\"/sign-in\"}>ChatBuddy</Link>\n          <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n            <ul className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to={\"/sign-in\"}>Sign in</Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to={\"/sign-up\"}>Sign up</Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"outer\">\n        <div className=\"inner\">\n          <Switch>\n            <Route exact path='/' component={Login} />\n            <Route path=\"/sign-in\" component={Login} />\n            <Route path=\"/sign-up\" component={SignUp} />\n          </Switch>\n        </div>\n      </div>\n    </div></Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}